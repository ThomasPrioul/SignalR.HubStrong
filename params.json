{"name":"SignalR.HubStrong","tagline":"Map and invoke SignalR methods in a strongly typed way on the client and server.","body":"#### Example\r\n\r\n```csharp\r\npublic interface IChatHub\r\n{\r\n    string GetConnectionId();\r\n    void SendMessage(string message, IProgress<int> onProgress);\r\n    void Login(string name);\r\n}\r\n\r\npublic interface IChatHubClient\r\n{\r\n    void NewMessage(string message);\r\n    void Greet(string name);\r\n}\r\n\r\npublic class ChatHub : Hub<IChatHubClient>, IChatHub\r\n{\r\n    public string GetConnectionId()\r\n    {\r\n        return Context.ConnectionId;\r\n    }\r\n\r\n    public void SendMessage(string message, IProgress<int> onProgress)\r\n    {\r\n        for (var i = 1; i <= 10; i++)\r\n        {\r\n            Thread.Sleep(200);\r\n            onProgress.Report(i * 10);\r\n        }\r\n        Clients.All.NewMessage(message);\r\n    }\r\n\r\n    public void Login(string name)\r\n    {\r\n        Clients.Caller.Greet(name);\r\n    }\r\n}\r\n\r\npublic class ChatHubClient : IChatHubClient\r\n{\r\n    public void Greet(string name)\r\n    {\r\n        Console.WriteLine(\"Hello, {0}!\", name);\r\n    }\r\n\r\n    public void NewMessage(string message)\r\n    {\r\n        Console.WriteLine(\"MESSAGE RECEIVED: {0}\", message);\r\n    }\r\n}    \r\n\r\npublic class Program\r\n{\r\n    public static void Main()\r\n    {\r\n        var hubConnection = new HubConnection(\"http://localhost:55555/\");\r\n        var hub = hubConnection.CreateHubProxy<IChatHub>(\"ChatHub\");\r\n        var client = new ChatHubClient();\r\n        hubConnection.Start().Wait();\r\n\r\n        // Replaces multiple calls to hub.On(\"NewMessage\", ...);\r\n        hub.MapClientMethods<IChatHubClient>(client);\r\n\r\n        // Replaces hub.Invoke<string>(\"GetConnectionId\");\r\n        var connectionId = hub.Invoke(h => h.GetConnectionId()).Result;\r\n        Console.WriteLine(\"Connected with ID: {0}\", connectionId);\r\n\r\n        Console.Write(\"What's your name? \");\r\n        var name = Console.ReadLine();\r\n        // Replaces hub.Invoke(\"Login\", name);\r\n        hub.Invoke(h => h.Login(name));\r\n\r\n        while (true)\r\n        {\r\n            var message = Console.ReadLine();\r\n            // Replaces hub.Invoke(\"SendMessage\", (int x) => OnProgress(x), message);\r\n            hub.Invoke((h, p) => h.SendMessage(message, p), (int x) => OnProgress(x));\r\n        }\r\n    }\r\n\r\n    private static void OnProgress(int progress)\r\n    {\r\n        Console.WriteLine(\"{0}%\", progress);\r\n    }\r\n}\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}